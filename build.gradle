buildscript {
    ext {
        // ソースと実行ファイルのJavaバージョン
        jdkVersion = jdkVersion
        defaultEncoding = defaultEncoding

        // SpringBoot
        springBootVersion = springbootVersion

        // SpringBootAdmin
        springbootAdminVersion = springbootAdminVersion

        // SpringCloudVersion
        springCloudVersion = springCloudVersion

        // EclipseCollections
        ecVersion = eclipsecollectionsVersion

        // ModelMapper
        modelmapperVersion = modelmapperVersion

    }

    repositories {
        jcenter()
    }

}

plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id "org.sonarqube" version "2.8"
}

apply from: "$rootDir/gradle/ide.gradle"

sonarqube {
    properties {
        property "sonar.github.repository", "mabubu0203/Sudoku"
        property "sonar.host.url", "http://localhost:9000/sonar"
        property "sonar.jacoco.reportPaths", { "${project.buildDir}/jacoco/test.exec" }
        property "sonar.jdbc.driverClassName", "org.postgresql.Driver"
        property "sonar.jdbc.password", "sonar"
        property "sonar.jdbc.url", "jdbc:postgresql://localhost:5432/sonar"
        property "sonar.jdbc.username", "sonar"
        property "sonar.junit.reportsPaths", { "${project.buildDir}/test-results" }
        property "sonar.language", "java"
        property "sonar.links.issue", "https://github.com/mabubu0203/Sudoku/issues"
        property "sonar.links.scm", "https://github.com/mabubu0203/Sudoku/"
        property "sonar.scm.provider", "git"
    }
}

allprojects {

    apply plugin: 'jacoco'
    apply plugin: 'java'

    repositories {
        jcenter()
    }

    jacoco {
        toolVersion = "0.8.5"
        reportsDir = file("$buildDir/customJacocoReportDir")
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    compileJava {
        doFirst {
            sourceCompatibility = jdkVersion
            targetCompatibility = jdkVersion
            options.encoding = defaultEncoding
        }
    }

}

subprojects {

    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'java-library'
    apply plugin: 'war'

    repositories {
        jcenter()
    }

    task('default') {
        dependsOn 'clean', 'check'
    }

}

project(':micro-api') {
    dependencies {
        implementation project(':micro-common') , project(':micro-interfaces') , project(':micro-validation')
    }
}

project(':micro-common') {
    dependencies {
        implementation project(':micro-interfaces')
    }
}

project(':micro-config') {
}

project(':micro-interfaces') {
    dependencies {
        implementation project(':micro-validation')
    }
}

project(':micro-rdb') {
    dependencies {
        implementation project(':micro-common') , project(':micro-interfaces')
    }
}

project(':micro-validation') {
}

project(':micro-web') {
    dependencies {
        implementation project(':micro-common') , project(':micro-interfaces') , project(':micro-validation')
    }
}